* BTCC DAX trade SDK
:PROPERTIES:
:header-args:js: :noweb yes :results output
:END:

All place/cancel order request should have a zero RC(Error Code) property

To use DAX trade SDK
#+BEGIN_SRC shell :dir /tmp
npm i -s @btcc_exchange/dax-trade-sdk
#+END_SRC

Create trader from SDK
#+NAME: create-trader
#+BEGIN_SRC js
const Trader = require('@btcc_exchange/dax-trade-sdk')

const trader = new Trader({
  accessKeyId: '01234567-0123-0123-0123-0123456789ab',
  secretAccessKey: '0123456789abcdef0123456789abcdef0123456789abcdef'
})
#+END_SRC

Get balance
#+BEGIN_SRC js
<<create-trader>>

trader.getAccountInfo().then((res) => {
  // Do something with axios response
  console.log(res.data)
})
#+END_SRC

Create simplified ETC_BTC market from trader (ETH_BTC the same)
#+NAME: create-etc-market
#+BEGIN_SRC js
<<create-trader>>

const etcMarket = trader.getMarket('ETC_BTC')
#+END_SRC

Get my open orders
#+BEGIN_SRC js
<<create-etc-market>>

etcMarket.list().then((res) => {
  // Do something with axios response
  console.log(res.data)
})
#+END_SRC

Buy 
#+BEGIN_SRC js
<<create-etc-market>>

// amount, price
etcMarket.buy('0.01', '0.1').then((res) => {
  // Do something with axios response
  console.log(res.data)
})
#+END_SRC

Sell
#+BEGIN_SRC js
<<create-etc-market>>

// amount, price
etcMarket.sell('0.02', '0.1').then((res) => {
  // Do something with axios response
  console.log(res.data)
})
#+END_SRC

Cancel order
#+BEGIN_SRC js
<<create-etc-market>>

// order id
etcMarket.cancel('0123456789abcdef0123456789abcdef').then((res) => {
  // Do something with axios response
  console.log(res.data)
})
#+END_SRC

To get a signed axios
#+BEGIN_SRC js
const Trader = require('@btcc_exchange/dax-trade-sdk')

const axios = Trader.signAxios({
  accessKeyId: '01234567-0123-0123-0123-0123456789ab',
  secretAccessKey: '0123456789abcdef0123456789abcdef0123456789abcdef'
})
#+END_SRC

* BTCC DAX Public Websocket API
:PROPERTIES:
:header-args:js: :results output
:END:

#+BEGIN_SRC shell :dir /tmp
npm i -s ws uuid
#+END_SRC

#+BEGIN_SRC js
const WebSocket = require('ws')
const uuidv4 = require('uuid/v4')

const ws = new WebSocket('wss://api-dax.btcc.com/ws/pub')

ws.on('open', () => {
  ws.send(JSON.stringify({
    MsgType: "QuoteRequest",
    CRID: uuidv4(),
    Symbol: "ETC_BTC",
    QuoteType: 2,
  }))
})

ws.on('message', (data) => {
  // Do something with GlobalTicker, OrderBook and ExecTradeBase
  console.log(data)
  ws.close() // Or remove this line to listen increment trade
})
#+END_SRC
